import React, { useState, useEffect } from "react";
import { fillPdf } from "../utils/meldunekPdfHelper.js";
import * as Yup from "yup";
import { Formik, Form, Field, ErrorMessage } from "formik";
import { AiOutlineCloseCircle } from "react-icons/ai";
import css from "./MeldunekForm.module.css";
import InfoMeldunek from "../InfoMeldunek/InfoMeldunek.jsx";

// üîπ –í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø–æ–ª—å—Å–∫–∏—Ö –±—É–∫–≤
const polishRegex = /^[a-zA-ZƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈º≈∫ƒÑƒÜƒò≈Å≈É√ì≈ö≈ª≈π\s-]+$/;

// üîπ –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Yup
const MeldunekSchema = Yup.object().shape({
    nazwisko: Yup.string()
      .matches(polishRegex, "Dozwolone tylko polskie litery / Only Polish letters / –õ–∏—à–µ –ø–æ–ª—å—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏")
      .min(2, "Za kr√≥tkie / Too short / –ó–∞–±–∞–≥–∞—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ")
      .max(50, "Za d≈Çugie / Too long / –ó–∞–±–∞–≥–∞—Ç–æ –¥–æ–≤–≥–µ")
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
    imie: Yup.string()
      .matches(polishRegex, "Dozwolone tylko polskie litery / Only Polish letters / –õ–∏—à–µ –ø–æ–ª—å—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏")
      .min(2, "Za kr√≥tkie / Too short / –ó–∞–±–∞–≥–∞—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ")
      .max(50, "Za d≈Çugie / Too long / –ó–∞–±–∞–≥–∞—Ç–æ –¥–æ–≤–≥–µ")
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
    pesel: Yup.string()
      .matches(/^[0-9]+$/, "Tylko cyfry / Only digits / –õ–∏—à–µ —Ü–∏—Ñ—Ä–∏")
      .length(11, "PESEL musi mieƒá 11 cyfr / PESEL must have 11 digits / PESEL –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 11 —Ü–∏—Ñ—Ä")
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
    krajUrodzenia: Yup.string()
      .matches(polishRegex, "Dozwolone tylko polskie litery / Only Polish letters / –õ–∏—à–µ –ø–æ–ª—å—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏")
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
    dataUrodzenia: Yup.date()
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
    miejsceUrodzenia: Yup.string()
      .matches(polishRegex, "Dozwolone tylko polskie litery / Only Polish letters / –õ–∏—à–µ –ø–æ–ª—å—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏")
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
    krajMiejscaZamieszkania: Yup.string()
      .matches(polishRegex, "Dozwolone tylko polskie litery / Only Polish letters / –õ–∏—à–µ –ø–æ–ª—å—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏")
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
    telefon: Yup.string()
      .matches(/^[0-9]+$/, "Tylko cyfry / Only digits / –õ–∏—à–µ —Ü–∏—Ñ—Ä–∏")
      .min(9, "Za kr√≥tki / Too short / –ó–∞–±–∞–≥–∞—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π")
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
    email: Yup.string()
      .email("Niepoprawny email / Invalid email / –ù–µ–≤—ñ—Ä–Ω–∏–π email")
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
    ulica: Yup.string()
      .matches(polishRegex, "Dozwolone tylko polskie litery / Only Polish letters / –õ–∏—à–µ –ø–æ–ª—å—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏")
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
    numerDomu: Yup.string()
      .matches(/^[0-9]+$/, "Tylko cyfry / Only digits / –õ–∏—à–µ —Ü–∏—Ñ—Ä–∏")
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
    numerLokalu: Yup.string()
      .matches(/^[0-9]*$/, "Tylko cyfry / Only digits / –õ–∏—à–µ —Ü–∏—Ñ—Ä–∏"),
    kodPocztowy: Yup.string()
      .matches(/^[0-9]{2}-[0-9]{3}$/, "Format: 00-000 / Format: 00-000 / –§–æ—Ä–º–∞—Ç: 00-000")
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
    miejscowoscDzielnica: Yup.string()
      .matches(polishRegex, "Dozwolone tylko polskie litery / Only Polish letters / –õ–∏—à–µ –ø–æ–ª—å—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏")
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
    gmina: Yup.string()
      .matches(polishRegex, "Dozwolone tylko polskie litery / Only Polish letters / –õ–∏—à–µ –ø–æ–ª—å—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏")
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
    wojewodztwo: Yup.string()
      .matches(polishRegex, "Dozwolone tylko polskie litery / Only Polish letters / –õ–∏—à–µ –ø–æ–ª—å—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏")
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
    dataPoczatkowa: Yup.date()
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
    dataKoncowa: Yup.date()
      .required("Wymagane / Required / –û–±–æ–≤'—è–∑–∫–æ–≤–æ"),
  });
  

// üîπ –ü–æ–ª—è —Ñ–æ—Ä–º—ã —Å label –∏ placeholder
const fields = [
  { name: "nazwisko", label: "Nazwisko / Surname / –ü—Ä—ñ–∑–≤–∏—â–µ", placeholder: "Doe" },
  { name: "imie", label: "Imiƒô / Name / –Ü–º º—è", placeholder: "John" },
  { name: "pesel", label: "PESEL", placeholder: "12345678901" },
  { name: "krajUrodzenia", label: "Kraj urodzenia / Country of birth / –ö—Ä–∞—ó–Ω–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", placeholder: "Polska" },
  { name: "dataUrodzenia", label: "Data urodzenia / Date of birth / –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", placeholder: "YYYY-MM-DD", type: "date" },
  { name: "miejsceUrodzenia", label: "Miejsce urodzenia / Place of birth / –ú—ñ—Å—Ç–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", placeholder: "Warszawa" },
  { name: "krajMiejscaZamieszkania", label: "Kraj miejsca zamieszkania / Country of residence / –ö—Ä–∞—ó–Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è", placeholder: "Polska" },
  { name: "telefon", label: "Telefon / Phone / –¢–µ–ª–µ—Ñ–æ–Ω", placeholder: "600123456" },
  { name: "email", label: "Email / Email / –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞", placeholder: "jan@example.com" },
  { name: "ulica", label: "Ulica / Street / –í—É–ª–∏—Ü—è", placeholder: "Marsza≈Çkowska" },
  { name: "numerDomu", label: "Numer domu / House number / –ù–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É", placeholder: "10" },
  { name: "numerLokalu", label: "Numer lokalu / Apartment number / –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏", placeholder: "5" },
  { name: "kodPocztowy", label: "Kod pocztowy / Postal code / –ü–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å", placeholder: "00-001" },
  { name: "miejscowoscDzielnica", label: "Miejscowo≈õƒá / City / –ú—ñ—Å—Ç–æ", placeholder: "Warszawa" },
  { name: "gmina", label: "Gmina / Municipality / –ì–º—ñ–Ω–∞", placeholder: "≈ör√≥dmie≈õcie" },
  { name: "wojewodztwo", label: "Wojew√≥dztwo / Province / –û–±–ª–∞—Å—Ç—å", placeholder: "Mazowieckie" },
  { name: "dataPoczatkowa", label: "Data poczƒÖtkowa / Start date / –î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É", placeholder: "YYYY-MM-DD", type: "date" },
  { name: "dataKoncowa", label: "Data ko≈Ñcowa / End date / –î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è", placeholder: "YYYY-MM-DD", type: "date" },
];

export default function MeldunekForm() {
  // üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å localStorage –∏–ª–∏ –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  const [savedValues, setSavedValues] = useState(() => {
    const saved = localStorage.getItem("formData");
    return saved ? JSON.parse(saved) : fields.reduce((acc, f) => ({ ...acc, [f.name]: "" }), {});
  });

  // üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ –ø–æ–ª—è
  const handleFieldChange = (field, value, setFieldValue) => {
    setFieldValue(field, value);
    const newValues = { ...savedValues, [field]: value };
    setSavedValues(newValues);
    localStorage.setItem("formData", JSON.stringify(newValues));
  };

  return (
    <div className={css.formBox}>
        <h2>Zg≈Çoszenie pobytu czasowego / Temporary residence registration / –ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è</h2>
        <div className={css.infoText}>
            <p>
                Je≈õli mieszkasz w Polsce ‚Äì zamelduj siƒô na pobyt sta≈Çy lub czasowy (czyli powy≈ºej 3 miesiƒôcy). 
                Nie musisz siƒô meldowaƒá, je≈õli wiesz, ≈ºe tw√≥j pobyt w Polsce nie bƒôdzie trwa≈Ç d≈Çu≈ºej ni≈º 30 dni ‚Äì 
                na przyk≈Çad, gdy spƒôdzasz w Polsce urlop.
            </p>
            <p>
                If you live in Poland ‚Äì register for permanent or temporary residence (i.e., over 3 months). 
                You do not need to register if your stay in Poland will not exceed 30 days ‚Äì for example, when you are on vacation in Poland.
            </p>
            <p>
                –Ø–∫—â–æ –≤–∏ –∂–∏–≤–µ—Ç–µ –≤ –ü–æ–ª—å—â—ñ ‚Äì –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –¥–ª—è –ø–æ—Å—Ç—ñ–π–Ω–æ–≥–æ –∞–±–æ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è (—Ç–æ–±—Ç–æ –ø–æ–Ω–∞–¥ 3 –º—ñ—Å—è—Ü—ñ). 
                –†–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —è–∫—â–æ –≤–∞—à–µ –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è –≤ –ü–æ–ª—å—â—ñ –Ω–µ —Ç—Ä–∏–≤–∞—Ç–∏–º–µ –±—ñ–ª—å—à–µ 30 –¥–Ω—ñ–≤ ‚Äì –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–æ–ª–∏ –≤–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤—ñ–¥–ø—É—Å—Ç–∫—É –≤ –ü–æ–ª—å—â—ñ.
            </p>
        </div>


      <Formik
        initialValues={savedValues}
        validationSchema={MeldunekSchema}
        enableReinitialize
        onSubmit={(values) => fillPdf(values)}
      >
        {({ values, setFieldValue, resetForm }) => (
          <Form>
            <div className={css.formGrid}>
              {fields.map((field) => (
                <div key={field.name} className={css.fieldWrapper}>
                  <label htmlFor={field.name} className={css.label}>
                    {field.label}
                  </label>

                  <div className={css.inputContainer}>
                    <Field
                      id={field.name}
                      name={field.name}
                      type={field.type || "text"}
                      placeholder={field.placeholder}
                      className={css.field}
                      value={values[field.name] || ""}
                      onChange={(e) =>
                        handleFieldChange(field.name, e.target.value, setFieldValue)
                      }
                    />
                    {values[field.name] && (
                      <button
                        type="button"
                        className={css.clearBtn}
                        onClick={() => handleFieldChange(field.name, "", setFieldValue)}
                      >
                        <AiOutlineCloseCircle />
                      </button>
                    )}
                  </div>

                  <ErrorMessage
                    name={field.name}
                    component="div"
                    className={css.errorMessage}
                  />
                </div>
              ))}
            </div>

            <div className={css.buttons}>
              <button type="submit">üìÑ Pobierz PDF</button>
              <button
                type="button"
                className={css.btn}
                onClick={() => {
                  resetForm();
                  const emptyValues = fields.reduce((acc, f) => ({ ...acc, [f.name]: "" }), {});
                  setSavedValues(emptyValues);
                  localStorage.removeItem("formData");
                }}
              >
                üßπ Wyczy≈õƒá
              </button>
            </div>
          </Form>
        )}
      </Formik>
      <InfoMeldunek />
    </div>
    
  );
  
}
